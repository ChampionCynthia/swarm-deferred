
// STATIC:		"ALPHATEST"			"0..1"
// STATIC:		"TRANSLUCENT"		"0..1"
// STATIC:		"READNORMAL"		"0..1"
// STATIC:		"NOCULL"			"0..1"
// STATIC:		"PHONGFRESNEL"		"0..1"
// STATIC:		"ENVMAP"			"0..1"
// STATIC:		"ENVMAPMASK"		"0..1"
// STATIC:		"ENVMAPFRESNEL"		"0..1"
// STATIC:		"RIMLIGHT"			"0..1"
// STATIC:		"BASETEXTURE2"		"0..1"
// STATIC:		"BLENDMODULATE"		"0..1"

// DYNAMIC:		"PIXELFOGTYPE"		"0..1"


// SKIP:		$ALPHATEST && $TRANSLUCENT
// SKIP:		!$ENVMAP && $ENVMAPFRESNEL
// SKIP:		!$ENVMAP && $ENVMAPMASK

// SKIP:		$ENVMAP && !$READNORMAL
// SKIP:		$ENVMAPFRESNEL && !$READNORMAL
// SKIP:		$PHONGFRESNEL && !$READNORMAL
// SKIP:		$RIMLIGHT && !$READNORMAL

// SKIP:		!$BASETEXTURE2 && $BLENDMODULATE
// SKIP:		$MODEL && $BASETEXTURE2

#include "common_ps_fxc.h"
#include "common_deferred_fxc.h"
#include "common_vertexlitgeneric_dx9.h"


sampler sAlbedo							: register( s0 );

#if ALPHATEST
const float g_flAlphaRef				: register( c0 );
#endif


#if READNORMAL
sampler sNormals						: register( s1 );
#endif

sampler sLightAccum						: register( s2 );

const float2 g_vecHalfScreenTexel		: register( c1 );
const float4 g_vecFogParams				: register( c2 );
const float3 g_vecOrigin				: register( c3 );

const float g_flPhongScale				: register( c4 );

#if ENVMAP
sampler sEnvmap								: register( s3 );
const float3 g_flEnvmapTint					: register( c5 );
const float2 g_flEnvmapSaturationContrast	: register( c6 );

#	if ENVMAPMASK
sampler sEnvmapMask							: register( s4 );
#	endif
#endif

#if BASETEXTURE2
sampler sAlbedo2							: register( s5 );
#endif

#if BLENDMODULATE
sampler sBlendmodulate						: register( s6 );
#endif

#if PHONGFRESNEL || ENVMAPFRESNEL
const float3 g_flFresnelRanges				: register( c7 );
#endif

#if RIMLIGHT
const float3 g_flRimLight_Tint						: register( c8 );
const float2 g_flRimLight_Exponent_AlbedoScale		: register( c9 );
#endif

struct PS_INPUT
{
#if BLENDMODULATE
	float4 vTexCoord				: TEXCOORD0;
#else
	float2 vTexCoord				: TEXCOORD0;
#endif

	float3 vProjPosXYW				: TEXCOORD1;
	float3 vWorldPos				: TEXCOORD2;

#if ENVMAP || RIMLIGHT || PHONGFRESNEL || ENVMAPFRESNEL
	float3 worldToEye				: TEXCOORD3;
#endif

#if BASETEXTURE2
	float4 vColor0					: COLOR0;
#endif

#if NOCULL
	float vDir						: VFACE;
#endif
};


struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};


PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;

	float4 flAlbedoSample = tex2D( sAlbedo, In.vTexCoord.xy );

#if BASETEXTURE2
	float4 flAlbedoSample2 = tex2D( sAlbedo2, In.vTexCoord.xy );

	float flBlendfactor = In.vColor0.w;

#if BLENDMODULATE
	float4 modt = tex2D( sBlendmodulate, In.vTexCoord.zw );
	float minb = max( 0, modt.g - modt.r );
	float maxb = min( 1, modt.g + modt.r );

	flBlendfactor = smoothstep( minb, maxb, flBlendfactor );
#endif

	flAlbedoSample = lerp( flAlbedoSample, flAlbedoSample2, flBlendfactor );

#endif

#if ALPHATEST
	clip( flAlbedoSample.a - g_flAlphaRef );
#endif

#if TRANSLUCENT
	Out.vColor_0.w = flAlbedoSample.a;
#else
	Out.vColor_0.w = 1;
#endif

	float2 screenPos = GetLightAccumUVs( In.vProjPosXYW, g_vecHalfScreenTexel );
	float4 flLighting = ReadLighting( tex2D( sLightAccum, screenPos ) );

#if READNORMAL
	float3 worldNormal = tex2D( sNormals, screenPos ).xyz * 2.0f - 1.0f;
#endif


#if RIMLIGHT || PHONGFRESNEL || ENVMAPFRESNEL
	float3 worldToEye = normalize( In.worldToEye );
	worldNormal = normalize( worldNormal );
#endif

#if PHONGFRESNEL || ENVMAPFRESNEL
	float flFresnel = saturate( Fresnel( worldNormal, worldToEye, g_flFresnelRanges ) );
#endif

#if PHONGFRESNEL
	flLighting.w *= flFresnel;
#endif

	float3 flSpecularLighting = (float3)0;

#if RIMLIGHT
	float dotEyeVec = 1.0f - saturate( dot( worldNormal, worldToEye ) );

	float3 rimLighting = pow( dotEyeVec, g_flRimLight_Exponent_AlbedoScale.x );
	rimLighting *= lerp( 1, flAlbedoSample.rgb, g_flRimLight_Exponent_AlbedoScale.y );
	rimLighting *= g_flRimLight_Tint;

	flSpecularLighting += rimLighting;
#endif


#if ENVMAP
	float flSpecularFactor =
#if ENVMAPMASK
		tex2D( sEnvmapMask, In.vTexCoord.xy ).r;
#else
		flAlbedoSample.a;
#endif

#if RIMLIGHT
	float3 reflectVect = reflect( worldToEye, worldNormal );
#else
	float3 reflectVect = CalcReflectionVectorUnnormalized( worldNormal, In.worldToEye );
#endif

	float3 flCubemap = ENV_MAP_SCALE * texCUBE( sEnvmap, reflectVect ).rgb;
	flCubemap *= flSpecularFactor;
	flCubemap *= g_flEnvmapTint;

#if ENVMAPFRESNEL
	flCubemap *= flFresnel;
#endif

	float3 specularLightingSquared = flCubemap * flCubemap;
	flCubemap = lerp( flCubemap, specularLightingSquared, g_flEnvmapSaturationContrast.y );
	float3 greyScale = dot( flCubemap, float3( 0.299f, 0.587f, 0.114f ) );
	flCubemap = lerp( greyScale, flCubemap, g_flEnvmapSaturationContrast.x );

	flSpecularLighting += flCubemap;
#endif

	float flLightScale =
#if DEFCFG_USE_SRGB_CONVERSION
		LINEAR_LIGHT_SCALE;
#else
		GAMMA_LIGHT_SCALE;
#endif

	Out.vColor_0.xyz = ( ( flAlbedoSample + flLighting.w * g_flPhongScale ) * flLighting.xyz
		+ flSpecularLighting ) * flLightScale;

#if PIXELFOGTYPE == 0
	float fogAmt = CalcRangeFog( g_vecOrigin, In.vWorldPos, g_vecFogParams.x, g_vecFogParams.z, g_vecFogParams.w );

	Out.vColor_0.xyz = lerp( Out.vColor_0.xyz, g_LinearFogColor, fogAmt );
#endif

	return Out;
}