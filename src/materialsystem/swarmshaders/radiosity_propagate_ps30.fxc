
// STATIC:		"BLUR"			"0..1"

#include "common_ps_fxc.h"
#include "common_deferred_fxc.h"


sampler sRadiosity						: register( s0 );
sampler sNormals						: register( s1 );

static const float flTexelSize =			1.0f / RADIOSITY_BUFFER_RES;
static const float flTexelSizeDouble =		2.0f / RADIOSITY_BUFFER_RES;

static const float3 vecPropagationDirection[6] = {
	float3( 1, 0, 0 ),
	float3( -1, 0, 0 ),
	float3( 0, 1, 0 ),
	float3( 0, -1, 0 ),
	float3( 0, 0, 1 ),
	float3( 0, 0, -1 ),
};

struct PS_INPUT
{
	float4 vTexCoord				: TEXCOORD0;

	float2 vGOrig_Cur				: TEXCOORD0;
	float4 vGOrig_One				: TEXCOORD1;
	float4 vGOrig_Two				: TEXCOORD2;
};


struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

void DoPropagate( inout float3 color, const in float2 uvbase, const in int index )
{
	color = max( color, tex2D( sRadiosity, uvbase ).rgb
		* step( dot( tex2D( sNormals, uvbase ).xyz * 2 - 1, vecPropagationDirection[index] ), 0.01f ) );
}

PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;

	float3 color = tex2D( sRadiosity, In.vTexCoord.xy ).rgb;

#if BLUR

	color += tex2D( sRadiosity, In.vGOrig_Cur.xy + float2( flTexelSize, 0 ) ).rgb;
	color += tex2D( sRadiosity, In.vGOrig_Cur.xy + float2( -flTexelSize, 0 ) ).rgb;
	color += tex2D( sRadiosity, In.vGOrig_Cur.xy + float2( 0, flTexelSize ) ).rgb;
	color += tex2D( sRadiosity, In.vGOrig_Cur.xy + float2( 0, -flTexelSize ) ).rgb;

	color += tex2D( sRadiosity, In.vGOrig_One.xy ).rgb;
	color += tex2D( sRadiosity, In.vGOrig_One.zw ).rgb;

	color *= ( 1.0f / 7.0f );

#else

	DoPropagate( color, In.vGOrig_Cur.xy + float2( flTexelSize, 0 ), 0 );
	DoPropagate( color, In.vGOrig_Cur.xy + float2( -flTexelSize, 0 ), 1 );
	DoPropagate( color, In.vGOrig_Cur.xy + float2( 0, flTexelSize ), 2 );
	DoPropagate( color, In.vGOrig_Cur.xy + float2( 0, -flTexelSize ), 3 );
	DoPropagate( color, In.vGOrig_One.xy, 4 );
	DoPropagate( color, In.vGOrig_One.zw, 5 );

#endif

	Out.vColor_0 = float4( color, 1 );

	return Out;
}