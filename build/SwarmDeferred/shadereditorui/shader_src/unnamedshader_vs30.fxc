// *********************************
// ** auto generated vertexshader **
// *********************************


// Includes
#include "common_vs_fxc.h"


// Constants
const float3 _g_VecOrig		: register( c48 );

// Semantic structures
struct VS_INPUT
{
	float3 vPos					:	POSITION;
	float3 vNormal				:	NORMAL;
	float3 vTangent_S			:	TANGENT;
	float3 vTangent_T			:	BINORMAL;
	float2 vTexCoord_0			:	TEXCOORD0;
	float2 vTexCoord_1			:	TEXCOORD1;
	float2 vTexCoord_2			:	TEXCOORD2;
};

struct VS_OUTPUT
{
	float4 vProjPos				:	POSITION;
	float2 vTexCoord_0			:	TEXCOORD0;
	float4 vTexCoord_1			:	TEXCOORD1;
	float3 vTexCoord_2			:	TEXCOORD2;
	float3 vTexCoord_3			:	TEXCOORD3;
	float2 vTexCoord_4			:	TEXCOORD4;
	float3 vTexCoord_5			:	TEXCOORD5;
	float3 vTexCoord_6			:	TEXCOORD6;
	float3 vTexCoord_7			:	TEXCOORD7;
	float4 vColor_0				:	COLOR0;
};

// Entry point
VS_OUTPUT main( const VS_INPUT In )
{
	VS_OUTPUT Out;
	float3 _var0 = mul( float4(In.vPos.xyz,1), cModel[0] );
	float2 _var1 = In.vTexCoord_1 + In.vTexCoord_2;
	float3 _var2 = mul( float4(In.vNormal.xyz,1), cModel[0] );
	float3 _var3 = mul( float4(In.vTangent_S.xyz,1), cModel[0] );
	float3 _var4 = mul( float4(In.vTangent_T.xyz,1), cModel[0] );
	float4 _var5 = mul( float4(_var0.xyz,1), cViewProj );
	float2 _var6 = _var1 + In.vTexCoord_2;
	_var2 = normalize( _var2 );
	_var3 = normalize( _var3 );
	_var4 = normalize( _var4 );
	float3 _var7 = _var0 - _g_VecOrig;
	float4 _var8 = float4( _var1, _var6 );
	float2 _var9 = _var6 + In.vTexCoord_2;
	Out.vProjPos = _var5;
	Out.vTexCoord_0 = In.vTexCoord_0;
	Out.vTexCoord_1 = _var8;
	Out.vTexCoord_2 = _var2;
	Out.vTexCoord_3 = _var0;
	Out.vTexCoord_4 = _var9;
	Out.vTexCoord_5 = _var3;
	Out.vTexCoord_6 = _var4;
	Out.vTexCoord_7 = _var7;
	Out.vColor_0 = _var5;
	return Out;
}