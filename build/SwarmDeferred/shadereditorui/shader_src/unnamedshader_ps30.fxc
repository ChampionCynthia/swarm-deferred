// ********************************
// ** auto generated pixelshader **
// ********************************

// Combos
// DYNAMIC: "PIXELFOGTYPE"		"0..1"
// DYNAMIC: "FLASHLIGHT"		"0..1"
// DYNAMIC: "FLASHLIGHTDEPTHFILTERMODE"		"0..2"
// DYNAMIC: "FLASHLIGHTSHADOWS"		"0..1"
// DYNAMIC: "WRITEWATERFOGTODESTALPHA"		"0..1"

// Includes
#include "common_ps_fxc.h"
#include "common_vertexlitgeneric_dx9.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_parallax.h"


// Samplers
sampler _Sampler_00		: register( s0 );
sampler _Sampler_01		: register( s1 );
sampler _Sampler_02		: register( s2 );
sampler _Sampler_03		: register( s3 );
sampler _gSampler_Flashlight_Cookie		: register( s4 );
sampler _gSampler_Flashlight_Depth		: register( s5 );
sampler _gSampler_Flashlight_Random		: register( s6 );

// Constants
const float4x4 g_cFlashlightWorldToTexture		: register( c12 );
const float4 _g_FogParams		: register( c16 );
const float3 _g_VecOrig		: register( c17 );
const float4 g_cFlashlightAttenuationFactors		: register( c8 );
const float4 g_cFlashlightPos		: register( c9 );
const float4 g_cShadowTweaks		: register( c7 );

// Semantic structures
struct PS_INPUT
{
	float2 vTexCoord_0			:	TEXCOORD0;
	float4 vTexCoord_1			:	TEXCOORD1;
	float3 vTexCoord_2			:	TEXCOORD2;
	float3 vTexCoord_3			:	TEXCOORD3;
	float2 vTexCoord_4			:	TEXCOORD4;
	float3 vTexCoord_5			:	TEXCOORD5;
	float3 vTexCoord_6			:	TEXCOORD6;
	float3 vTexCoord_7			:	TEXCOORD7;
	float4 vColor_0				:	COLOR0;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

// Entry point
PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;
	float3 _var0 = float3( 0.000000, 0.000000, 0.000000 );
	float3 _var1 = tex2D( _Sampler_00, In.vTexCoord_0 ).rgb;
	float3x3 _var2 = { In.vTexCoord_5,
				In.vTexCoord_6,
				In.vTexCoord_2 };
	float3 _var3 = tex2D( _Sampler_01, In.vTexCoord_0 ).rgb;
	float _var4 = _g_VecOrig.z;
	float _var5 = In.vTexCoord_3.z;
	float _var6 = In.vColor_0.z;
	float3 _var7 = reflect( In.vTexCoord_7, float3( 0.000000, 0.000000, 1.000000 ) );
	_var1 = _var1 * float( 2.000000 );
	_var4 = CalcPixelFogFactor( PIXELFOGTYPE, _g_FogParams, _var4, _var5, _var6 );
	float4 _var8 = texCUBE( _Sampler_02, _var7 ).rgba;
	_var1 = _var1 - float( 1.000000 );
	Out.vColor_0 = _var8;
#if ( FLASHLIGHT == 0 )
		float2 _var9 = In.vTexCoord_1.xy;
		float _var10 = dot( _var1, bumpBasis[0] );
		float _var11 = dot( _var1, bumpBasis[1] );
		float _var12 = dot( _var1, bumpBasis[2] );
		float2 _var13 = In.vTexCoord_1.zw;
		float3 _var14 = tex2D( _Sampler_03, In.vTexCoord_4 ).rgb;
		float3 _var15 = tex2D( _Sampler_03, _var9 ).rgb;
		float2 _var16 = float2( _var10, _var11 );
		float3 _var17 = tex2D( _Sampler_03, _var13 ).rgb;
		float3 _var18 = float3( _var16, _var12 );
		_var18 = saturate( _var18 );
		_var18 = _var18 * _var18;
		float _var19 = _var18.x;
		float _var20 = _var18.y;
		float _var21 = _var18.z;
		float _var22 = dot( float3( float( 1.000000 ), float( 1.000000 ), float( 1.000000 ) ), _var18 );
		_var15 = _var15 * _var19;
		_var17 = _var17 * _var20;
		_var14 = _var14 * _var21;
		_var22 = LIGHT_MAP_SCALE / _var22;
		_var15 = _var15 + _var17;
		_var15 = _var15 + _var14;
		_var15 = _var15 * _var22;
		_var0 = _var15;
#endif
	float3 _var23 = mul( _var1, _var2 );
	_var23 = normalize( _var23 );
#if ( FLASHLIGHT == 1 )
		float4 _var24 = mul( float4(In.vTexCoord_3.xyz,1), g_cFlashlightWorldToTexture );
		float2 _var25 = In.vColor_0.xy;
		float _var26 = In.vColor_0.w;
		_var25 = _var25 / _var26;
		_var25 = _var25 * float( 0.500000 );
		_var25 = _var25 + float( 0.500000 );
		_var23 = DoFlashlight( g_cFlashlightPos.xyz, In.vTexCoord_3, _var24, _var23,
				g_cFlashlightAttenuationFactors.xyz, g_cFlashlightAttenuationFactors.w,
				_gSampler_Flashlight_Cookie, _gSampler_Flashlight_Depth, _gSampler_Flashlight_Random,
				FLASHLIGHTDEPTHFILTERMODE, FLASHLIGHTSHADOWS, true,
				_var25, false, g_cShadowTweaks );
		_var0 = _var23;
#endif
	_var0 = _var0;
	_var0 = _var0 * _var3;
	float4 _var27 = float4( _var0.x, _var0.y, _var0.z, 1.000000 );
	_var27 = FinalOutput( _var27, _var4, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR, true, _var6 );
	return Out;
}